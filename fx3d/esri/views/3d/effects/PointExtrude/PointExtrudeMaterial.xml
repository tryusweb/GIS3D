<?xml version="1.0" encoding="UTF-8"?><!-- Copyright @ 2017 Esri. All rights reserved under the copyright laws of the United States and applicable international laws, treaties, and conventions. --><snippets><snippet name="pointExtrudeFS"><![CDATA[
#ifdef GL_ES
precision mediump float;
#endif
uniform float lm;uniform vec3 os;uniform vec4 ml;uniform vec4 is;uniform vec4 sl;uniform vec3 camPos;varying vec4 dg;varying vec3 dd;varying vec3 cc;const vec3 a=vec3(1.0,1.0,1.0);const vec3 b=vec3(1.0,1.0,1.0);const vec3 c=vec3(0.2,0.2,0.2);void main(){vec3 d=normalize(cc-camPos);vec3 e=normalize(dd);vec3 f=normalize(reflect(d,e));float g=max(dot(f,os),.001);vec3 h=c*sl.rgb*sl.w*pow(g,18.0);vec3 i=a*is.rgb*is.w*clamp(dot(e,os),.0,1.0);vec3 j=b*ml.rgb*ml.w;vec3 k=vec3(j+i+h);gl_FragColor.xyz=dg.xyz*k;float l=lm*0.01;gl_FragColor.w=l;}]]></snippet><snippet name="pointExtrudeVS"><![CDATA[attribute vec3 $position;attribute vec3 $auxpos1;attribute vec3 $normal;attribute vec3 $auxpos2;uniform mat4 lp;uniform mat4 viewMat;uniform sampler2D ss;uniform sampler2D ll;uniform float me;uniform vec3 ls;uniform vec3 origin;uniform vec3 camPos;uniform sampler2D pm;uniform vec3 es;uniform float oi;uniform float pp;uniform vec2 ps;uniform vec2 ei;uniform bool el;uniform float po;uniform vec4 le;varying vec4 dg;varying vec3 dd;varying vec3 cc; $linearInterpolator  $lonlat2position  $translationMat  $localTrans  $quintEaseOut const float a=1.0;const float b=0.0;vec4 matchPixelCenter(vec4 c,vec2 d){vec2 e=vec2(.500123)+.5*c.xy/c.w;vec2 f=floor(e*d);vec2 g=vec2(1.0)/d;vec2 h=(((vec2(.5)+f)*g)*2.0-vec2(1.0))*c.w;return vec4(h.x,h.y,c.z,c.w);}void main(void){float i=fract($auxpos2.x/ps.x);float j=floor($auxpos2.x/ps.y)/ps.y;float k=(texture2D(ss,vec2(i,j))).r;float l=(texture2D(ll,vec2(i,j))).r;float m=mod(oi,me);float n=getQuintEaseInOutValue(m,k,l,me);if(el){n=l;}float o=getLinearValue(ei,n);float p=$auxpos2.y*pp*2.0*PI;vec3 q=vec3(ls.x*cos(p),ls.x*sin(p),0.0);bool r=false;if($auxpos2.z==a){r=true;}else if($auxpos2.z==b){r=false;}vec3 s=ls.x*$position+$auxpos1;vec3 t=(viewMat*vec4($auxpos1,1.0)).xyz;vec3 u;mat4 v=mat4(1.0);
#ifdef GLOBAL
u=normalize(s+origin);
#else
u=vec3(0.0,0.0,1.0);
#endif
vec3 w=(viewMat*vec4(s,1.0)).xyz;dd=normalize(w-t);if(r){dg=texture2D(pm,vec2(o,0.5));s+=(u*getScope(ls.yz,o));}else{dg=vec4(es,1.0);}vec3 x=vec3(1.0,0.0,0.0);float y=1.0;float z=1.0;float A=abs(dot(u,normalize(camPos-s)));float B=0.00001;w=(viewMat*vec4(s,1.0)).xyz;if(A>.01){float C=sqrt(1.0-A*A)/A;float D=(1.0-C/le[2]);if(z>0.0){w*=D;}else{w/=D;}}w+=x;vec4 E=lp*vec4(w,1.0);E.z-=z*B*E.w;gl_Position=matchPixelCenter(E,le.zw);dd=normalize(u+dd*0.5);cc=w;}]]></snippet></snippets>